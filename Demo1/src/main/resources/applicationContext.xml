<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

<!--myBatis相关-->
    <!-- 1.配置数据库相关参数properties的属性：${url} -->
    <context:property-placeholder location="classpath:mydb.properties" />

    <!--2.数据库连接池-->
    <!--datasource配置-->
    <bean id="mydatasource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="password" value="123456"></property>
        <property name="username" value="root"></property>
        <property name="url" value="jdbc:mysql://localhost:3306/production_ssm?serverTimezone=GMT"></property>
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
    </bean>

    <!-- 3.配置SqlSessionFactory对象 ，把一些原来在conf中的也可以放在这里做-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="mydatasource"/>
        <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
        <property name="configLocation" value="classpath:conf.xml"/>
        <!--下面两项也可以在conf.xml中设置-->
        <!-- 扫描entity包 使用别名 -->
       <!--<property name="typeAliasesPackage" value="org.deepsl.hrm.domain"/>-->
        <!-- 扫描sql配置文件:mapper需要的xml文件 -->
        <!--<property name="mapperLocations" value="classpath:org/deepsl/hrm/mapper/*.xml"/>-->
    </bean>

    <!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 给出需要扫描Dao接口包 -->
        <property name="basePackage" value="com.cskaoyan.mapper"/>
    </bean>


<!--service层, spring-->

    <!--扫描包-->
    <context:component-scan base-package="com.cskaoyan"></context:component-scan>

    <!-- 配置事务管理器 -->
    <bean name="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="mydatasource"></property>
    </bean>
    <!-- 配置基于注解的声明式事务 -->
    <tx:annotation-driven transaction-manager="dataSourceTransactionManager"/>


<!--springMVC层-->

    <!--自动去增加处理器适配器和处理器映射器-->
    <mvc:annotation-driven validator="validator" ></mvc:annotation-driven>

    <!--校验器-->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"></property>


    </bean>



    <!--拦截器-->
    <!--<mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="org.deepsl.hrm.interceptor.AuthorizedInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>-->

    <!--文件上传-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
         <property name="maxUploadSizePerFile" value="10240">
         </property>
    </bean>




    <!--方式2-->
    <!--2.静态资源默认servlet配置(1)加入对静态资源的处理：js,gif,png(2)允许使用"/"做整体映射-->
     <!--<mvc:default-servlet-handler/>-->

    <!--方式3-->
    <mvc:resources location="/, /WEB-INF/"  mapping="/**"/>


    <!--配置警示牌、显示ViewResolver,例如controller中某个方法返回一个string类型的“login”，实际上回返回“WEB-INF/login.jsp”！！！-->
    <!--是在视图解析的时候才会用上-->
    <!-- 3.配置jsp 显示ViewResolver -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/" />
        <property name="suffix" value=".jsp" />
    </bean>







</beans>